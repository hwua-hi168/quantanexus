# Global configuration
global:
  namespace: abc-platform
  domainName: qntest002.hi168.com
  # registry: harbor.hi168.com/quantanexus
  # In China, please use aliyuncs
  registry: registry.cn-hangzhou.aliyuncs.com/quantanexus
  # outside of China, please use docker.io
  # registry: docker.io/hwua
  masterNode: com-calino-master-1
  masterNodes: "com-calino-master-1,com-calino-master-2"
  workerNodes: "com-calino-worker-1"

# Component toggles
components:
  createNamespace: true
  labelController: true
  quantanexus: true
  abcExperimentService: true
  abcWebShell: true
  abcUploader: true
  hwuaNodeService: true

# PostgreSQL configuration (如果使用子chart)
postgresql:
  enabled: true
  auth:
    username: quantanexus
    password: quantanexus
    database: quantanexus001
  # 主数据库镜像配置
  image:
    registry: registry.cn-hangzhou.aliyuncs.com/quantanexus
    repository: postgresql
    tag: 14.4.0-debian-11-r23
    pullPolicy: IfNotPresent
    # digest: ""
  primary:
    persistence:
      enabled: true
      # 必须空，才能匹配 hostPath PV
      storageClass: ""
      size: 40Gi
    # 让 Pod 也落在同一块节点
    # nodeSelector:
    #   kubernetes.io/hostname: com-calino-master-1
    podSecurityContext:
      enabled: true
      fsGroup: 0 
    containerSecurityContext:
      enabled: true
      runAsUser: 0
    hostNetwork: true
  hostPath:
    # true=生成 hostPath PV；false=走集群默认动态供给
    enabled: false
    # node: com-calino-master-1   # 目标节点
    # path: /var/lib/quantanexus/postgresql
    # storage: 40Gi
  # Prometheus Exporter 镜像配置 (如果启用了 metrics)
  metrics:
    enabled: true
    image:
      registry: registry.cn-hangzhou.aliyuncs.com/quantanexus
      repository: postgres-exporter
      tag: 0.10.1-debian-11-r24
      pullPolicy: IfNotPresent  

redis:
  auth:
    password: hi168pass
  path: /var/lib/quantanexus/redis-single
  repository: "redis"
  tag: "7.2.4"
  imagePullPolicy: "IfNotPresent"

quantanexus:
  replicaCount: 1

  # 新增：Odoo 核心运行参数
  config:
    maxCronThreads: 8
    workers: 16
  # Quantanexus core application
  app:
    repository: "quantanexus-basic"
    tag: "1.0.5"
    imagePullPolicy: "IfNotPresent"

  # Image pull secrets configuration
  imagePullSecrets:
    enabled: false
    secrets:
      - name: hi168-harbor-secret

  # Quantanexus manager (init container)
  manager:
    repository: "quantanexus-mgr"
    tag: "v8.3.7.5"

  # Nginx reverse proxy
  nginx:
    repository: "nginx"
    tag: "reverse"
    port: 8443

    # Frontend (Vue) init container
    frontend:
      repository: "hi168-vue"
      tag: "v8.3.7.qn5"
      env:
        type: "hi168slot"
        moduleList: "basic"

  # Host aliases
  hostAliases:
    # - ip: "192.168.103.120"
    #   hostnames:
    #     - "harbor.hi168.com"

  # Storage paths and PVC configuration
  storage:
    # 新增开关: 控制是否使用 hostPath 卷。false 表示使用 PVC (Longhorn 自动分配)
    hostPathEnabled: false 
    
    # 路径配置 (hostPathEnabled: true 时使用)
    quantanexusData: "/var/lib/quantanexus/quantanexus"
    quantanexusMisc: "/var/lib/quantanexus/quantanexus-misc"
    runtime: "/mnt/quantanexus/runtime"

    # PVC 大小配置 (hostPathEnabled: false 时使用)
    # 请根据您的实际需求调整这些存储大小
    pvcSizes:
      runtime: 30Gi  # QuantaNexus 运行时卷大小
      data: 40Gi     # QuantaNexus 数据卷大小
      misc: 20Gi     # QuantaNexus 杂项卷大小    

  # Environment variables
  env:
    home: "/var/lib/quantanexus"
    configPath: "/opt/etc/quantanexus/prod.conf"
    updateOption: "-i muk_web_theme,hw_base,hw_frontend -u all"
    preStartShell: "/opt/etc/quantanexus/pre-start.sh"

  # Liveness probe
  livenessProbe:
    path: "/liveness"
    port: 8069
    initialDelaySeconds: 300
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# ABC Experiment Service configuration
abcExperimentService:
  replicaCount: 1

  # Application settings
  app:
    repository: "abc-experiment-service"
    tag: "v1.3.2"
    imagePullPolicy: "IfNotPresent"

  # Service configuration
  service:
    port: 8075
    host: "0.0.0.0"

  # Docker configuration
  docker:
    baseUrl: "https://172.17.0.1:8088"
    certPath: "/etc/abc_platform/docker-ssl/client-cert.pem"
    keyPath: "/etc/abc_platform/docker-ssl/client-key.pem"
    caCertPath: "/etc/abc_platform/docker-ssl/ca.pem"

  # Kubernetes configuration
  kubernetes:
    configFile: "/etc/kubernetes/admin.conf"
    host: "https://172.17.0.1:6443"
    sslCaCert: "/etc/kubernetes/pki/ca.crt"
    verifySsl: "False"
    token: "eyJhbGciOiJSUzI1NiIsImtpZCI6ImtPU1V1blRqb0lMVzdZZ1FsTFh4Z1lUZ1VnS1gzekNNOGJWVnFycTR3X3MifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tOTlyOHQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYWQ3NTM1MjgtNmZmNS00MDU0LWEwNDEtNzBiNTc1ZmUxMTljIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.bDMwLeuyCv4p3neoYDzS4T24haCC8FPirYybh5oYyLrZiYfcaHnzzBBsMY4kJkNS2oM0CqPb2PrmBWy7-TLWDmWAcTrSMZy11hPJRJwJuG0dQsajoGn8NZ6u1_n8Qso5Y8Fik1kEOSwpOa7eXDrAOrCUS-HySMHXNBXML3v541vHlpI9Zxw2pe6ELgvhZqFYIzydrS0ur48gM6rwI3Rp25b3ZB9Oy5dGB_ZpQAuXoY-QK9ymE8dUWpRX9V0WrNzrFnHB1-O5bjtSY_5ONBNDSJuSHydh7c-WxT9InH2M1v-FU2h8EEgYPYMmeHoYNslEsQg2Fq9VU-tFrJfdbhnkMA"
    assertHostname: "portal"
    server: "https://192.168.103.156:6443"
    caData: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURtakNDQW9LZ0F3SUJBZ0lVU1dybStqcjBRVzhZSDlQTmNRZTVaOE1rZnc0d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1pERUxNQWtHQTFVRUJoTUNRMDR4RVRBUEJnTlZCQWdUQ0VoaGJtZGFhRzkxTVFzd0NRWURWUVFIRXdKWQpVekVNTUFvR0ExVUVDaE1EYXpoek1ROHdEUVlEVlFRTEV3WlRlWE4wWlcweEZqQVVCZ05WQkFNVERXdDFZbVZ5CmJtVjBaWE10WTJFd0lCY05NalV3T1RFd01EWTBPREF3V2hnUE1qRXlOVEE0TVRjd05qUTRNREJhTUdReEN6QUoKQmdOVkJBWVRBa05PTVJFd0R3WURWUVFJRXdoSVlXNW5XbWh2ZFRFTE1Ba0dBMVVFQnhNQ1dGTXhEREFLQmdOVgpCQW9UQTJzNGN6RVBNQTBHQTFVRUN4TUdVM2x6ZEdWdE1SWXdGQVlEVlFRREV3MXJkV0psY201bGRHVnpMV05oCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeURHYUJ6cEN3YlA2Vjl5ellnOEIKZjRJU2c2cldTMWJVTmhlVWZoQkptMFY4MUVtcHdKS1BHSlpvWnYraG1xQytjcjlHR0FQcUtyTFF4d0dDTWRIdgo3YVZDK3lkNmxYenRDdHA2L093YmJwUnpiaW1VRy9jYmNkZ3p1WmJnaExpcUxXWENSOWN3SEEvVW9Gc0M1dStoCm93R0RQMzMveWZGSytkcm9FY1dFUmQrc3FkWUFmbDYxYmRFUzhhK2MvSXZlK2hrckpYVFRhM1R3N1JVdmJ4QXMKT0dYWnFFdWhzaEptbEF4ZHpzd2lSNzZIbTlvK1NoQU9GcVZoZGtyL2JjNFRraW8yN1pNSlpkSmRHMExldWJmaQprSjJ2OThnTVBhRCswNVBJZWVNVVgvMTFkMEZLQ3ErTWpQMFJXUUNUejlZRWpzZW1LWVVUeTJEQ2lYRjEzakg0CjF3SURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQVFZd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlYKSFE0RUZnUVVrRDg4SEliejJmdmVFaldad3YxMzlnOUo3NDh3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUJSVApoS2R1SWxmUHZaVHZVNGZXeGUwY1dDRzZMNXZKU0JpRmpZN1Jtd3Y1bjUrWnFaNkQ4ZGdSajZzTWlJaFo4Y0hCClRTeVBKOFpVeHJnNFhCMGtDNVg2c3hGS0ZEVnkrdFpyOW5SQmtUS3ZvaWw4eWZhNkJsRWVMNjQwSlZtTk5KNE4KSERrWjNzZ3oyNUdLSFNYM1FXdk1GeHF6UVVnZjNhcEFjb2x3Q1lNeUp0U1ZLOFRsYXk2ZGV3VUhpY0czOHMxUQpuNDdxYnJuZVBMM2x6R2lwM2MzU0g4UWFCcTVHZXQ2SjRTcS9xZHZrdTRtY2FOaXY4bWwweVJCQ0w1N2czZDNmCmozcFIxQ0JoMm9HbDJqTVZqQTJOVE9TeW4wUXRnYndkYXU4aVJCdjNGRUVYanJrNGhKYkJUVTgvY1RvcVBKREQKZS9jUWs4SUhMbDMzODExcEFuMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
    clientCertData: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQyakNDQXNLZ0F3SUJBZ0lVQ0VKZ3FLWDFvU1BheERkMThnZkpHQzlGbStrd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1pERUxNQWtHQTFVRUJoTUNRMDR4RVRBUEJnTlZCQWdUQ0VoaGJtZGFhRzkxTVFzd0NRWURWUVFIRXdKWQpVekVNTUFvR0ExVUVDaE1EYXpoek1ROHdEUVlEVlFRTEV3WlRlWE4wWlcweEZqQVVCZ05WQkFNVERXdDFZbVZ5CmJtVjBaWE10WTJFd0lCY05NalV3T1RFd01EWTBPREF3V2hnUE1qQTNOVEE0TWprd05qUTRNREJhTUdjeEN6QUoKQmdOVkJBWVRBa05PTVJFd0R3WURWUVFJRXdoSVlXNW5XbWh2ZFRFTE1Ba0dBMVVFQnhNQ1dGTXhGekFWQmdOVgpCQW9URG5ONWMzUmxiVHB0WVhOMFpYSnpNUTh3RFFZRFZRUUxFd1pUZVhOMFpXMHhEakFNQmdOVkJBTVRCV0ZrCmJXbHVNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTlOY3ByWXUzeWVFODhLbmwKWC8wSDJLK2pHWDFTVmVEZUFOVkQ2K2ZHODJSMFBHeGUrL2V4UWVRVGZXUkVJZ1V1R2hDU0FCY1ZCL09HSnhpSgpZQ01jU2g0WFROVzFpU1E3Zit1SVBiK0NEb0JDclB1a25NQWdSUE1BTUc3RlNDdmtRbTR0Vyt4UE81R1hrL21TCnlQU0k0amp1Z05XY21YalNDTkw2WjFPeTlSY2poLzRiK0NmNjBLSjVZeGZsSlQwRmgrR0dhUnY4Y1JnNThVZm8KakN6YUwycms2aU9aa3dQTzJNWmNmSW0xejJ4VU9SQ2x4eHZtdmxjWmJpbk9Qamt3SGdzNHpsc05wNTk0YTdlegpQTm01UWNDU3dtSnNPQVA1dmU2Y0x6ZTFIY1VudGVxb1ByOUZoVXE4aWNaRXFzbllsYWx3ZGdpejh3MTlNRVJXCi93SXhLd0lEQVFBQm8zOHdmVEFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SFFZRFZSME9CQllFRkwzemFZWERJbXo3SHNmWgowdlNvM0JsL1c4ZkxNQjhHQTFVZEl3UVlNQmFBRkpBL1BCeUc4OW43M2hJMW1jTDlkL1lQU2UrUE1BMEdDU3FHClNJYjNEUUVCQ3dVQUE0SUJBUUJibDVVOE1EWlVmejRCTzJrNXM0VWQzUVpudUtsK2NabWQwc29TRThLMWVXcXIKVDM1VFg2ZkZGRjZKTDhJelU2WG91azVHRDJvVy9ZLzRKYmFCSU5MYnlDd3hGZmRucWFud3VicXhGN2liZGRtSgpiclljZjN3aEE4dFprWGhVT2szdXBBOXEwREZ0VnlJNVo5RHNPMSs1VjFZUWlhS2ZUaFA1OGd0ajRUR1RiVVV0Cm9TSHdSZEZ0cWFtOUJyeXZ3NFlSQ0M4eWdGMXhRQWVUVktzaUh2OFBKdkFiNTJhYlBzbko3OGtJV3lTUVFKcFQKWkxiUDQ3L2ZoMmxhU1FuTWpKaE1tNWhORVVzNzBYTHBLUXJpQ1hVZHN2bnJwUEJrZVVBZ2RRWW5hb0pMUmRVSQpDeElCUGtEcEM5bTRmNkNFZWcvNXJWS0Q3cTJqelkybjFISWR5NUFqCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
    clientKeyData: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBOU5jcHJZdTN5ZUU4OEtubFgvMEgySytqR1gxU1ZlRGVBTlZENitmRzgyUjBQR3hlCisvZXhRZVFUZldSRUlnVXVHaENTQUJjVkIvT0dKeGlKWUNNY1NoNFhUTlcxaVNRN2YrdUlQYitDRG9CQ3JQdWsKbk1BZ1JQTUFNRzdGU0N2a1FtNHRXK3hQTzVHWGsvbVN5UFNJNGpqdWdOV2NtWGpTQ05MNloxT3k5UmNqaC80YgorQ2Y2MEtKNVl4ZmxKVDBGaCtHR2FSdjhjUmc1OFVmb2pDemFMMnJrNmlPWmt3UE8yTVpjZkltMXoyeFVPUkNsCnh4dm12bGNaYmluT1Bqa3dIZ3M0emxzTnA1OTRhN2V6UE5tNVFjQ1N3bUpzT0FQNXZlNmNMemUxSGNVbnRlcW8KUHI5RmhVcThpY1pFcXNuWWxhbHdkZ2l6OHcxOU1FUlcvd0l4S3dJREFRQUJBb0lCQVFDY29yWW9MN1Z4c3VZdwp0UkJvVzFGVXYvQ2hFdnJFdENweTcvMFhBOTNVd2xSV2Y2STRvbHJGWTZ0UVVnQUFuNzNCc1E0bWZwM1d5MlhzCnh4YkQ2VkprM0dGZHAyOFBBSjRNRlZ2QTNTN1FKaUFCMksrVUZKblFZb0doZW93OXdzNng3Umlac1ZGek00NTgKZlhMNW11K2pnbmFhOTQzSzVXL0JjMi85QUtBQmlQNjFHT2xESitCVlFZZFUvZGpSbHRpR21xbWdIZGEvV09KWQptZDhueFRJUUpUNkhBR296S3cxbUJYK3FNYkFBNDVxTmlhQlhrV2tYR1lwbDR0Q2x4eEk3djFoZHJERzJzaE45ClE3dU5xdDZKZlJTWHlkK2pBY210UUN6cTVHelJ2aEs3MUhNREw0R3RnUTJBL2dUWTZYRC9Ldkh0VXZGSzVBdjQKdXhsd2NNOWhBb0dCQVBiYUFLTXVCak1zbDlNWjhGTE9rUWhZb1BpVnRGN215UURWQjU5NHpPRjRlOWVCdkpadAp0VVljMDZ6aHIwTFlUT3JGREQ2Sjc4VmZLM3p1dGI0VDg1eit5cEJHdjJGWGU2bjk1THZ2bTBHUitXaWVySC9JCjVWQWErdFg2bVNicmpCcnNZRnAra2pMaEdmS0Q1cUgyNUlTWkJjTy90WFRsT1JGYlp1UEVkd01SQW9HQkFQM3EKRklOYnYrRzY4NXZNZ0thckd3ZUFMeDdTb2ZCMmN3cTRvNUZ0RkhTVTl3OGo4QlpnSjBheFhmK0oyS3ZMaVJJcgpVRkZyNjVmMmE2N2VKZEE3dGppeUR1QnFuVFdjSU9MNnJiaXduVGtVeHZadUNsaTQyR2VRbkhXbEFHVzV2N3hxCm9zb0U2WjNBT3ZTUmQrd3N3bVdsdXFIUHhuRU9URC9YRjk2dXFEaDdBb0dCQUtsY2dMdDBSRVN2LzZxU1RWUkMKN1Rhd3VDQlZkZDcyc0VtbDN3a0d0R3F0WXlwRWxNTVFtaUowZkxaTVVSYW5tSDRxbTIvODYwaWJOeGNNSUIwOQpTeE1YckpxNEwyMzF1NTZ4MTFFcDMzZHBVNWozNUpuM2wzMFNSYTZ4dElvRGFhaS9MSXhwOHB4OTNIT0xFNTFqCjZ2MGVqOW54bWVtTnEwM0JUQ0pSRk9aQkFvR0FhYTVjdlZPWnFJMFVTWnN6VEt0WXc2VnhkMFc1eXdpeDF4dUUKVU1ueXdwY2h3VFoyL2drbEw4SXcybVA0UDRDbVcxNlZ2bDNKbitVYmFwdmhaeXNESzlQSVoxVlllM0N4SzJlawptSU5CM1BrdDJuRndjdjcwYXg2QVVHTE5xSWxJS1ZiRXpJcUE1WHlWelNjaW43VDljQ3NyWTUvRCsxZzFHamtmCklUclduek1DZ1lBTHM2V01lMTBOTlFnU2lNOW1zSDlLSXZQdHFGdTJyQlBrUEM0eTVFS1FQcWFjMG9pY0VWQ1cKOEVycy92bGxIaTJwRjFKUm02YmFnWmVncG83SUpsUVJwK2t4R09BY2pyck82S0N1TVBNdHk0SVpZU1FkNXZuMQp6R0toQUUxUjl6UDFSeTBnbVVHdnh1ZHhmUWw2SURzWURXUk9wNTVEQzRvZ2MyMEtkbXd0RVE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  # Virtual VNC configuration
  virtVnc:
    node: "192.168.103.170"
    port: 32211

  # Authentication
  enableAuth: false
  authUrlBase: ""

# ABC WebShell configuration
abcWebShell:
  replicaCount: 1

  # Image configuration
  image:
    repository: abc-webshell
    tag: v2.2.4.8
    pullPolicy: IfNotPresent

  # Service account configuration
  serviceAccount:
    create: true
    name: abc-webshell

  # Node selector for master nodes
  nodeSelector:
    ha_node_type: master

  # App configuration
  config:
    appname: abc-webshell
    httpport: 8080
    runmode: "prod"
    kubeconfig: ""
    beego_pprof: true
    https: true
    url_prefix: ""
    enable_demo: true
    debug: true

  # Service configuration
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080

  # Ingress configuration
  ingress:
    enabled: true
    className: nginx
    paths:
      - /t(/|$)(.*)
      - /demo
      - /static/css/xterm.css
      - /static/css/bootstrap.min.css
      - /static/js/index.js
      - /static/xml/app.xml
      - /static/imgs/favicon.ico
    annotations:
      ingress.kubernetes.io/ingress.class: "nginx"
      nginx.org/client-max-body-size: 100M
      nginx.ingress.kubernetes.io/cors-allow-headers: >-
        DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization
      nginx.ingress.kubernetes.io/affinity: "cookie"
      nginx.ingress.kubernetes.io/session-cookie-name: "session_id"
    tls:
      enabled: true
      secretName: abc-tls
# ABC Uploader configuration
abcUploader:
  replicaCount: 1

  # Image configuration
  image:
    repository: abc-uploader
    tag: v1.0.0
    pullPolicy: IfNotPresent

  # Service account configuration (复用 WebShell 的 service account)
  serviceAccountName: abc-webshell

  # Node selector for master nodes
  nodeSelector:
    ha_node_type: master

  # App configuration
  config:
    appname: abc-uploader
    httpport: 8080
    runmode: "prod"
    kubeconfig: ""
    beego_pprof: true
    enable_allow_origin: false
    https: false
    url_prefix: ""
    enable_demo: true
    debug: true
    uploader_home: "/var/abc-uploader/upload"
    orm_debug: false
    clean_chunk_duration: 8
    sqlite_db_path: "/var/abc-uploader/datas/abc_uploader.db"

  # Host path volumes
  hostPaths:
    upload: "/usr/local/abc-uploader/upload"
    datas: "/usr/local/abc-uploader/datas"
    upload_david: "/usr/local/abc-uploader/upload-david"

  # Service configuration
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080

  # Ingress configuration
  ingress:
    enabled: true
    className: nginx
    paths:
      - /file/upload
    annotations:
      ingress.kubernetes.io/ingress.class: "nginx"
      nginx.org/client-max-body-size: 100M
      nginx.ingress.kubernetes.io/cors-allow-headers: >-
        DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization
      nginx.ingress.kubernetes.io/affinity: "cookie"
      nginx.ingress.kubernetes.io/session-cookie-name: "session_id"
    tls:
      enabled: true
      secretName: abc-tls

# HWUA Node Service configuration
hwuaNodeService:

  # Image configuration
  image:
    repository: hwua-node-service
    tag: 0.0.4
    pullPolicy: IfNotPresent

  # Configuration
  config:
    appname: "HWNodeService"
    logfile: "/var/log/hwua-node-service/service.log"
    cri:
      type: "containerd"
      socket_addr: "/run/containerd/containerd.sock"
      namespace: "k8s.io"
    server:
      ip: "0.0.0.0"
      port: 168

  # Host aliases
  hostAliases:
    # - ip: "192.168.103.120"
    #   hostnames:
    #     - "harbor.hi168.com"

  # Image pull secrets
  imagePullSecrets: "hi168-harbor-secret"
